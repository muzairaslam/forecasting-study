---
title: "Regression Analysis"
format: html
---

```{r}
library("tidyverse")
library("fabletools")
library("ggpubr")
library("fpp3")
library("here")
library("gt")
library("gtsummary")
library("car")
library("lmtest")
options(scipen = 10)  # Temporarily increase penalty for scientific notation
set.seed(1)         # for reproduciblity
```

```{r}
data <- read_csv(here("data/data-consolidated-2.csv"))
```


```{r}
# Year = Index
data_arranged <- data |>
    rename(
        no = `Serial No`,
        fis_yr = `Fiscal Year`,
        nit_vol_k_ton = `Nitrogen Volume (N K tonnes)`,
        nit_price_per_ton = `Nitrogen Price (per tonne)`,
        water_maf = `Water Availability (MAF)`,
        cr_area_mn_hec = `Cropped Area (million hectares)`,
        agric_gdp_rs_bn = `Agricultural GDP (Rs in billions)`,
        agric_gdp_usd_bn_cy = `Agricultural GDP (current BN US$) C-Y`,
        credit_dis_rs_mn = `Total Credit Disbursed (Rs million)`,
        inp_out_ratio = `Input Output Ratio`,
        n_p_ratio = `N / P`,
        p_n_ratio = `P/N`,
        agric_employment = `Agriculture Employment (Mns)`,
        pkr_per_usd = `PKR-USD`,
    ) |>
    mutate(
        lag_agric_gdp_rs_bn = lag(agric_gdp_rs_bn),
        lag_agric_gdp_usd_bn_cy = lag(agric_gdp_usd_bn_cy),
        tech_proxy = (agric_gdp_rs_bn/cr_area_mn_hec)/(cr_area_mn_hec/agric_employment),
        lg_nit_vol_k_ton = log(nit_vol_k_ton),
        lg_nit_price_per_ton = log(nit_price_per_ton),
        lg_water_maf = log(water_maf),
        lg_cr_area_mn_hec = log(cr_area_mn_hec),
        lg_agric_gdp_rs_bn = log(agric_gdp_rs_bn),
        lg_agric_gdp_usd_bn_cy = log(agric_gdp_usd_bn_cy),  
        lag_lg_agric_gdp_usd_bn_cy = log(lag_agric_gdp_usd_bn_cy),
        lg_credit_dis_rs_mn = log(credit_dis_rs_mn),
        lg_inp_out_ratio = log(inp_out_ratio),
        lg_n_p_ratio = log(n_p_ratio),
        lg_p_n_ratio = log(p_n_ratio),
        lg_tech_proxy = log(tech_proxy)
    ) |> 
    slice_tail(n = 29)

data_arranged$fis_yr <- as.integer(data_arranged$fis_yr)
data_arranged$no <- as.integer(data_arranged$no)
data_arranged$nit_vol_k_ton <- as.integer(data_arranged$nit_vol_k_ton)

data_tsibble <- data_arranged |> 
    as_tsibble(index = fis_yr)
```

### Median and Standard Deviation of Variables

```{r}
med_price_nit <- median(data_tsibble$nit_price_per_ton)
std_price_nit <- sd(data_tsibble$nit_price_per_ton)

med_vol_nit <- median(data_tsibble$nit_vol_k_ton)
std_vol_nit <- sd(data_tsibble$nit_vol_k_ton)

med_water_maf <- median(data_tsibble$water_maf)
std_water_maf <- sd(data_tsibble$water_maf)

med_cr_area_mn_hec <- median(data_tsibble$cr_area_mn_hec)
std_cr_area_mn_hec <- sd(data_tsibble$cr_area_mn_hec)

med_agric_gdp_usd <- median(data_tsibble$agric_gdp_usd_bn_cy)
std_agric_gdp_usd <- sd(data_tsibble$agric_gdp_usd_bn_cy)

med_agric_gdp_rs <- median(data_tsibble$agric_gdp_rs_bn)
std_agric_gdp_rs <- sd(data_tsibble$agric_gdp_rs_bn)

med_lag_agric_gdp_usd <- median(data_tsibble$lag_agric_gdp_usd_bn_cy)
std_lag_agric_gdp_usd <- sd(data_tsibble$lag_agric_gdp_usd_bn_cy)

med_credit_dis <- median(data_tsibble$credit_dis_rs_mn)
std_credit_dis <- sd(data_tsibble$credit_dis_rs_mn)

med_tech_proxy <- median(data_tsibble$tech_proxy)
std_tech_proxy <- sd(data_tsibble$tech_proxy)

med_np_ratio <- median(data_tsibble$n_p_ratio)
std_np_ratio <- sd(data_tsibble$n_p_ratio)

med_pn_ratio <- median(data_tsibble$p_n_ratio)
std_pn_ratio <- sd(data_tsibble$p_n_ratio)

med_input_output_ratio <- median(data_tsibble$inp_out_ratio)
std_input_output_ratio <- sd(data_tsibble$inp_out_ratio)

# Compute medians and standard deviations for log-transformed variables
med_lg_nit_vol_k_ton <- median(data_tsibble$lg_nit_vol_k_ton)
std_lg_nit_vol_k_ton <- sd(data_tsibble$lg_nit_vol_k_ton)

med_lg_nit_price_per_ton <- median(data_tsibble$lg_nit_price_per_ton)
std_lg_nit_price_per_ton <- sd(data_tsibble$lg_nit_price_per_ton)

med_lg_water_maf <- median(data_tsibble$lg_water_maf)
std_lg_water_maf <- sd(data_tsibble$lg_water_maf)

med_lg_cr_area_mn_hec <- median(data_tsibble$lg_cr_area_mn_hec)
std_lg_cr_area_mn_hec <- sd(data_tsibble$lg_cr_area_mn_hec)

med_lag_lg_agric_gdp_usd_bn_cy <- median(data_tsibble$lag_lg_agric_gdp_usd_bn_cy)
std_lag_lg_agric_gdp_usd_bn_cy <- sd(data_tsibble$lag_lg_agric_gdp_usd_bn_cy)

med_lg_credit_dis_rs_mn <- median(data_tsibble$lg_credit_dis_rs_mn)
std_lg_credit_dis_rs_mn <- sd(data_tsibble$lg_credit_dis_rs_mn)

med_lg_inp_out_ratio <- median(data_tsibble$lg_inp_out_ratio)
std_lg_inp_out_ratio <- sd(data_tsibble$lg_inp_out_ratio)

med_lg_n_p_ratio <- median(data_tsibble$lg_n_p_ratio)
std_lg_n_p_ratio <- sd(data_tsibble$lg_n_p_ratio)

med_lg_p_n_ratio <- median(data_tsibble$lg_p_n_ratio)
std_lg_p_n_ratio <- sd(data_tsibble$lg_p_n_ratio)

med_lg_tech_proxy <- median(data_tsibble$lg_tech_proxy)
std_lg_tech_proxy <- sd(data_tsibble$lg_tech_proxy)

# Combine the results into a data frame
summary_stats <- data.frame(
  variable = c(
    "nit_price_per_ton", "nit_vol_k_ton", "water_maf", "cr_area_mn_hec",
    "lag_agric_gdp_usd_bn_cy", "credit_dis_rs_mn", "tech_proxy", "n_p_ratio",
    "input_output_ratio", "lg_nit_vol_k_ton", "lg_nit_price_per_ton",
    "lg_water_maf", "lg_cr_area_mn_hec", "lag_lg_agric_gdp_usd_bn_cy", "agric_gdp_rs_bn",
    "lg_credit_dis_rs_mn", "lg_inp_out_ratio", "lg_n_p_ratio", "lg_tech_proxy"
  ),
  
  median = c(
    med_price_nit, med_vol_nit, med_water_maf, med_cr_area_mn_hec,
    med_lag_agric_gdp, med_credit_dis, med_tech_proxy, med_np_ratio,
    med_input_output_ratio, med_lg_nit_vol_k_ton, med_lg_nit_price_per_ton,
    med_lg_water_maf, med_lg_cr_area_mn_hec, med_lag_lg_agric_gdp_usd_bn_cy, med_agric_gdp_rs,
    med_lg_credit_dis_rs_mn, med_lg_inp_out_ratio, med_lg_n_p_ratio, med_lg_tech_proxy
  ),
  std_dev = c(
    std_price_nit, std_vol_nit, std_water_maf, std_cr_area_mn_hec,
    std_lag_agric_gdp, std_credit_dis, std_tech_proxy, std_np_ratio,
    std_input_output_ratio, std_lg_nit_vol_k_ton, std_lg_nit_price_per_ton,
    std_lg_water_maf, std_lg_cr_area_mn_hec, std_lag_lg_agric_gdp_usd_bn_cy,std_agric_gdp_rs,
    std_lg_credit_dis_rs_mn, std_lg_inp_out_ratio, std_lg_n_p_ratio, std_lg_tech_proxy
  )
)

# Print the summary statistics data frame
print(summary_stats)

```
### Variables

y = Nitrogen Volume K Ton

x1 = Price of Nitrogen
x2 = Water Avaialability
x3 = Cropped Accreage
x4 = Lag Agric GDP Bn PKR
x5 = Agric Credit
x6 = Tech Proxy
x7 = Input Output Ratio
x8 = N/P Ratio

## Regression Analysis

Before moving to regression analysis, let's make some time series plots to understand the data better.


```{r}
complete_vars <- data_tsibble |>
  select(
    nit_vol_k_ton,
    nit_price_per_ton ,
    water_maf,
    cr_area_mn_hec,
    lag_agric_gdp_usd_bn_cy,
    credit_dis_rs_mn ,
    tech_proxy,
    inp_out_ratio ,
    n_p_ratio)


complete_vars |>
  pivot_longer(cols = -fis_yr, names_to = "Variable", values_to = "Value") |>
  ggplot(aes(x = fis_yr, y = Value, colour = Variable)) +
  geom_line() +
  geom_point() +
  facet_grid(Variable ~ ., scales = "free_y") +
  guides(colour = "none") +
  labs(x = "Fiscal Year", y = "Value", title = "Time Series Plot of All Variables") +
  scale_x_continuous(breaks = seq(min(complete_vars$fis_yr), max(complete_vars$fis_yr), by = 5)) + 
  theme(
    strip.text.y = element_text(size = 10, angle = 0),  # Adjust the size and angle of facet labels
    strip.background = element_blank(),  # Remove the background to make it cleaner
    panel.spacing = unit(1, "lines")  # Add more space between facets
  )

```

### 6 Vars Model

```{r}
six_vars_model <- lm(
    nit_vol_k_ton ~ nit_price_per_ton + 
                    water_maf + 
                    cr_area_mn_hec +
                    lag_agric_gdp_rs_bn +
                    credit_dis_rs_mn +
                    tech_proxy,
                    data = data_tsibble
        )
print(summary(six_vars_model))

# Calculate VIF
vif_values <- vif(six_vars_model)

anova_results <- anova(six_vars_model)


# Extract residuals and Predicted values from the linear model
residuals_df <- data.frame(
  Fiscal_Year = data_tsibble$fis_yr, 
  Residuals = residuals(six_vars_model),
  Predicted_Values = six_vars_model$fitted.values,
  Historic_Values = data_tsibble$nit_vol_k_ton
)

median_resid <- median(residuals_df$Residuals)
sd_resid <- sd(residuals_df$Residuals)

# Add columns for ±1 and ±2 standard deviations around the Predicted values
residuals_df <- residuals_df |>
  mutate(
    Predicted_Values_Plus_1SD = Predicted_Values + sd_resid,
    Predicted_Values_Minus_1SD = Predicted_Values - sd_resid,
    Predicted_Values_Plus_2SD = Predicted_Values + 2 * sd_resid,
    Predicted_Values_Minus_2SD = Predicted_Values - 2 * sd_resid
  )

# Conduct Normality check
shapiro.test(residuals_df$Residuals)

# Durbin Watson Test for Autocorrelation tests

durbinWatsonTest(six_vars_model)

# White Test for hetroscedacity 

white_test <- bptest(
    six_vars_model,
    ~ fitted.values(six_vars_model) + I(fitted.values(six_vars_model)^2)
)

# Print the result
print(white_test)


# Plot residuals
resid_over_time <- ggplot(residuals_df, aes(x = Fiscal_Year, y = Residuals)) +
  geom_line() +
  geom_point() +
  labs(title = "Residuals over Time", x = "Fiscal Year", y = "Residuals") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 5)) 


# ACF plot
resid_acf <- acf(residuals_df$Residuals, main="ACF Plot of Model Residuals")

# Residual Histograms
resid_hist <- gghistogram(residuals_df$Residuals, fill = "brown", add = "median",title = "Histogram for Residual Errors") + 
  annotate("text", x = median_resid, y = 0, label = paste("Median =", round(median_resid, 2)), vjust = -35, color = "black", size = 4) +
  annotate("text", x = median_resid, y = 0, label = paste("Std Dev=", round(sd_resid, 2)), vjust = -33, hjust = 0.5, color = "black", size = 4)

# Create a Residuals vs. Predicted Values plot
plot(six_vars_model, which = 1)

# Create a QQ-plot of residuals
plot(six_vars_model, which = 2)

# Create a Scale-Location plot Spread-Location plot or sqrt(residuals) vs. Predicted values plot
# It is designed to check the assumption of homoscedasticity: residuals (errors) of the model have constant variance across all levels of the independent variables.
plot(six_vars_model, which = 3)

# Create Cook's distance plot
plot(six_vars_model, which = 4)

# Create a Residuals vs. Leverage plot: to identify influential data points and assess the influence of observations on the regression model
plot(six_vars_model, which = 5)

# Line of Best Fit
best_fit_plot <- ggplot(residuals_df, aes(x = Fiscal_Year)) +
  geom_line(aes(y = Historic_Values, color = "Actual Values"), size = 1) +  # Plot historic values
  geom_point(aes(y = Historic_Values, color = "Actual Values"), size = 2) +
  geom_line(aes(y = Predicted_Values, color = "Predicted Values"), size = 1, linetype = "dashed") +  # Plot Predicted values (line of best fit)
  geom_point(aes(y = Predicted_Values, color = "Predicted Values"), size = 2) +  # Add points for predicted values
  geom_ribbon(aes(ymin = Predicted_Values_Minus_1SD, ymax = Predicted_Values_Plus_1SD), fill = "orange", alpha = 0.2) +  # 1 SD band
  geom_ribbon(aes(ymin = Predicted_Values_Minus_2SD, ymax = Predicted_Values_Plus_2SD), fill = "yellow", alpha = 0.2) +  # 2 SD band
  labs(title = "Actual vs. Predicted Values with ±1 and ±2 Standard Deviations",
       x = "Fiscal Year",
       y = "Nitrogen Volume K Ton") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 2)) + 
  scale_color_manual(values = c("Actual Values" = "blue", "Predicted Values" = "red")) +  # Set custom colors
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(hjust = 0.5),  # Center the plot title
        legend.title = element_blank(),  # Remove the legend title
        legend.position = "top")  # Position the legend at the top
```


### 6 Vars Log Log Model

```{r}
six_vars_log_model <- lm(
    lg_nit_vol_k_ton ~ lg_nit_price_per_ton + 
                        lg_water_maf +
                        lg_cr_area_mn_hec + 
                        log(lag_agric_gdp_rs_bn) + 
                        lg_credit_dis_rs_mn +
                        lg_tech_proxy,
                        data = data_tsibble
    )

summary(six_vars_log_model) 

# Calculating VIF
vif_values <- vif(six_vars_log_model)

# Calculate the ANOVA table for the model
anova_results <- anova(six_vars_log_model)



```

### 6 Vars Lin Log Model

```{r}
six_vars_lin_log_model <- lm(
  nit_vol_k_ton ~ lg_nit_price_per_ton + 
                  lg_water_maf +
                  lg_cr_area_mn_hec + 
                  log(lag_agric_gdp_rs_bn)+ 
                  lg_credit_dis_rs_mn +
                  lg_tech_proxy,
                  data = data_tsibble
    )

summary(six_vars_lin_log_model) 

# Calculating VIF
vif_values <- vif(six_vars_lin_log_model)

# Calculate the ANOVA table for the model
anova_results <- anova(six_vars_lin_log_model)

# Display the ANOVA table
print(anova_results)
```



### 8 Vars Model

```{r}
eight_vars_model <- lm(
    nit_vol_k_ton ~ nit_price_per_ton + 
                    water_maf + 
                    cr_area_mn_hec +
                    lag_agric_gdp_rs_bn +
                    credit_dis_rs_mn +
                    tech_proxy +
                    inp_out_ratio +
                    n_p_ratio,
                    data = data_tsibble
        )

summary(eight_vars_model)

# Calculating VIF
vif_values <- vif(eight_vars_model)

# Calculate the ANOVA table for the model
anova_results <- anova(eight_vars_model)

# Extract residuals and Predicted values from the linear model
residuals_df <- data.frame(
  Fiscal_Year = data_tsibble$fis_yr, 
  Residuals = residuals(eight_vars_model),
  Predicted_Values = eight_vars_model$fitted.values,
  Historic_Values = data_tsibble$nit_vol_k_ton
)

median_resid <- median(residuals_df$Residuals)
sd_resid <- sd(residuals_df$Residuals)

# Add columns for ±1 and ±2 standard deviations around the Predicted values
residuals_df <- residuals_df |>
  mutate(
    Predicted_Values_Plus_1SD = Predicted_Values + sd_resid,
    Predicted_Values_Minus_1SD = Predicted_Values - sd_resid,
    Predicted_Values_Plus_2SD = Predicted_Values + 2 * sd_resid,
    Predicted_Values_Minus_2SD = Predicted_Values - 2 * sd_resid
  )

# Conduct Normality check
shapiro.test(residuals_df$Residuals)

# Durbin Watson Test for Autocorrelation tests

durbinWatsonTest(eight_vars_model)

# White Test for hetroscedacity 

white_test <- bptest(
    eight_vars_model,
    ~ fitted.values(eight_vars_model) + I(fitted.values(eight_vars_model)^2)
)

# Print the result
print(white_test)

# ACF plot
resid_acf <- acf(residuals_df$Residuals, main="ACF Plot of Model Residuals")

# Residual Histograms
resid_hist <- gghistogram(residuals_df$Residuals, fill = "brown", add = "median",title = "Histogram for Residual Errors") + 
  annotate("text", x = median_resid, y = 0, label = paste("Median =", round(median_resid, 2)), vjust = -35, color = "black", size = 4) +
  annotate("text", x = median_resid, y = 0, label = paste("Std Dev=", round(sd_resid, 2)), vjust = -33, hjust = 0.5, color = "black", size = 4)

# Create a Residuals vs. Predicted Values plot
plot(eight_vars_model, which = 1)

# Create a QQ-plot of residuals
plot(eight_vars_model, which = 2)

# Create a Scale-Location plot Spread-Location plot or sqrt(residuals) vs. Predicted values plot
# It is designed to check the assumption of homoscedasticity: residuals (errors) of the model have constant variance across all levels of the independent variables.
plot(eight_vars_model, which = 3)

# Create Cook's distance plot
plot(eight_vars_model, which = 4)

# Create a Residuals vs. Leverage plot: to identify influential data points and assess the influence of observations on the regression model
plot(eight_vars_model, which = 5)

# Line of Best Fit
best_fit_plot <- ggplot(residuals_df, aes(x = Fiscal_Year)) +
  geom_line(aes(y = Historic_Values, color = "Actual Values"), size = 1) +  # Plot historic values
  geom_point(aes(y = Historic_Values, color = "Actual Values"), size = 2) +
  geom_line(aes(y = Predicted_Values, color = "Predicted Values"), size = 1, linetype = "dashed") +  # Plot Predicted values (line of best fit)
  geom_point(aes(y = Predicted_Values, color = "Predicted Values"), size = 2) +  # Add points for predicted values
  geom_ribbon(aes(ymin = Predicted_Values_Minus_1SD, ymax = Predicted_Values_Plus_1SD), fill = "orange", alpha = 0.2) +  # 1 SD band
  geom_ribbon(aes(ymin = Predicted_Values_Minus_2SD, ymax = Predicted_Values_Plus_2SD), fill = "yellow", alpha = 0.2) +  # 2 SD band
  labs(title = "Actual vs. Predicted Values with ±1 and ±2 Standard Deviations",
       x = "Fiscal Year",
       y = "Nitrogen Volume K Ton") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 2)) + 
  scale_color_manual(values = c("Actual Values" = "blue", "Predicted Values" = "red")) +  # Set custom colors
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(hjust = 0.5),  # Center the plot title
        legend.title = element_blank(),  # Remove the legend title
        legend.position = "top")  # Position the legend at the top
```

### 8 Vars Log Log Model

```{r}
eight_vars_log_model <- lm(
    lg_nit_vol_k_ton ~ lg_nit_price_per_ton + 
                        lg_water_maf +
                        lg_cr_area_mn_hec + 
                        log(lag_agric_gdp_rs_bn) + 
                        lg_credit_dis_rs_mn +
                        lg_tech_proxy +
                        lg_inp_out_ratio +
                        lg_n_p_ratio,
                        data = data_tsibble
    )

summary(eight_vars_log_model)

# Calculating VIF
vif_values <- vif(eight_vars_log_model)

# Calculate the ANOVA table for the model
anova_results <- anova(eight_vars_log_model)

# Display the ANOVA table
print(anova_results)
```

### 8 Vars Lin Log Model


```{r}
eight_vars_lin_log_model <- lm(
    nit_vol_k_ton ~ lg_nit_price_per_ton + 
                        lg_water_maf +
                        lg_cr_area_mn_hec + 
                        log(lag_agric_gdp_rs_bn) + 
                        lg_credit_dis_rs_mn +
                        lg_tech_proxy +
                        lg_inp_out_ratio +
                        lg_n_p_ratio,
                        data = data_tsibble
    )

summary(eight_vars_lin_log_model)

# Calculating VIF
vif_values <- vif(eight_vars_lin_log_model)

# Calculate the ANOVA table for the model
anova_results <- anova(eight_vars_lin_log_model)

# Display the ANOVA table
print(anova_results)
```
