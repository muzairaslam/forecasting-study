---
title: "Regression Analysis"
format: html
---


```{r}
library("tidyverse")
library("fabletools")
library("ggpubr")
library("fpp3")
library("here")
library("gt")
library("gtsummary")
library("car")
library("lmtest")
options(scipen = 10)  # Temporarily increase penalty for scientific notation
set.seed(1)   
```


```{r}
data <- read_csv(here("data/data-consolidated-2.csv"))
```


```{r}
# Year = Index
data_arranged <- data |>
    rename(
        no = `Serial No`,
        fis_yr = `Fiscal Year`,
        nit_vol_k_ton = `Nitrogen Volume (N K tonnes)`,
        nit_price_per_ton = `Nitrogen Price (per tonne)`,
        water_maf = `Water Availability (MAF)`,
        cr_area_mn_hec = `Cropped Area (million hectares)`,
        agric_gdp_rs_bn = `Agricultural GDP (Rs in billions)`,
        agric_gdp_usd_bn_cy = `Agricultural GDP (current BN US$) C-Y`,
        credit_dis_rs_mn = `Total Credit Disbursed (Rs million)`,
        inp_out_ratio = `Input Output Ratio`,
        n_p_ratio = `N / P`,
        p_n_ratio = `P/N`,
        agric_employment = `Agriculture Employment (Mns)`,
        pkr_per_usd = `PKR-USD`,
    ) |>
    mutate(
        lag_agric_gdp_usd_bn_cy = lag(agric_gdp_usd_bn_cy),
        tech_proxy = (agric_gdp_rs_bn/cr_area_mn_hec)/(cr_area_mn_hec/agric_employment),
        agric_gdp_rs_mn = agric_gdp_rs_bn * 1000,
        agric_credit_ratio = credit_dis_rs_mn/agric_gdp_rs_mn,
        lg_nit_vol_k_ton = log(nit_vol_k_ton),
        lg_nit_price_per_ton = log(nit_price_per_ton),
        lg_water_maf = log(water_maf),
        lg_cr_area_mn_hec = log(cr_area_mn_hec),
        lg_agric_gdp_rs_bn = log(agric_gdp_rs_bn),
        lg_agric_gdp_usd_bn_cy = log(agric_gdp_usd_bn_cy),  
        lag_lg_agric_gdp_usd_bn_cy = log(lag_agric_gdp_usd_bn_cy),
        lg_credit_dis_rs_mn = log(credit_dis_rs_mn),
        lg_inp_out_ratio = log(inp_out_ratio),
        lg_n_p_ratio = log(n_p_ratio),
        lg_p_n_ratio = log(p_n_ratio),
        lg_tech_proxy = log(tech_proxy)
    ) |> 
    slice_tail(n = 29)

data_arranged$fis_yr <- as.integer(data_arranged$fis_yr)
data_arranged$no <- as.integer(data_arranged$no)
data_arranged$nit_vol_k_ton <- as.integer(data_arranged$nit_vol_k_ton)

data_tsibble <- data_arranged |> 
    as_tsibble(index = fis_yr)
```


### Variables

y = Nitrogen Volume K Ton

x1 = Price of Nitrogen
x2 = Water Avaialability
x3 = Cropped Accreage
x4 = Lag Agric GDP Bn USD
x5 = Agric Credit Mn/Agric GDP Rs Mn
x6 = Tech Proxy
x7 = Input Output Ratio
x8 = N/P Ratio

### 6 vars model

```{r}
six_vars_model <- lm(
    nit_vol_k_ton ~ nit_price_per_ton + 
                    water_maf + 
                    cr_area_mn_hec +
                    lag_agric_gdp_usd_bn_cy +
                    agric_credit_ratio +
                    tech_proxy,
                    data = data_tsibble
        )

print(summary(six_vars_model))

# Calculate VIF
vif_values <- vif(six_vars_model)

# Calculate the ANOVA table for the model
anova_results <- anova(six_vars_model)

# Extract residuals and fitted values from the linear model
residuals_df <- data.frame(
  Fiscal_Year = data_tsibble$fis_yr, 
  Residuals = residuals(six_vars_model),
  Fitted_Values = six_vars_model$fitted.values,
  Historic_Values = data_tsibble$nit_vol_k_ton
)

median_resid <- median(residuals_df$Residuals)
sd_resid <- sd(residuals_df$Residuals)

# Add columns for ±1 and ±2 standard deviations around the fitted values
residuals_df <- residuals_df |>
  mutate(
    Fitted_Values_Plus_1SD = Fitted_Values + sd_resid,
    Fitted_Values_Minus_1SD = Fitted_Values - sd_resid,
    Fitted_Values_Plus_2SD = Fitted_Values + 2 * sd_resid,
    Fitted_Values_Minus_2SD = Fitted_Values - 2 * sd_resid
  )

# Plot residuals
resid_over_time <- ggplot(residuals_df, aes(x = Fiscal_Year, y = Residuals)) +
  geom_line() +
  geom_point() +
  labs(title = "Residuals over Time", x = "Fiscal Year", y = "Residuals") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 5)) 


# ACF plot
resid_acf <- acf(residuals_df$Residuals, main="ACF Plot of Model Residuals")

# Residual Histograms
resid_hist <- gghistogram(residuals_df$Residuals, fill = "brown", add = "median",title = "Histogram for Residual Errors") + 
  annotate("text", x = median_resid, y = 0, label = paste("Median =", round(median_resid, 2)), vjust = -35, color = "black", size = 4) +
  annotate("text", x = median_resid, y = 0, label = paste("Std Dev=", round(sd_resid, 2)), vjust = -33, hjust = 0.5, color = "black", size = 4)

# Conduct Normality check
shapiro.test(residuals_df$Residuals)

# Durbin Watson Test for Autocorrelation tests

durbinWatsonTest(six_vars_model)

# White Test for hetroscedacity 

white_test <- bptest(
    six_vars_model,
    ~ fitted.values(six_vars_model) + I(fitted.values(six_vars_model)^2)
)

# Print the result
print(white_test)

# Create a Residuals vs. Fitted Values plot
plot(six_vars_model, which = 1)

# Create a QQ-plot of residuals
plot(six_vars_model, which = 2)

# Create a Scale-Location plot Spread-Location plot or sqrt(residuals) vs. fitted values plot
# It is designed to check the assumption of homoscedasticity: residuals (errors) of the model have constant variance across all levels of the independent variables.
plot(six_vars_model, which = 3)

# Create Cook's distance plot
plot(six_vars_model, which = 4)

# Create a Residuals vs. Leverage plot: to identify influential data points and assess the influence of observations on the regression model
plot(six_vars_model, which = 5)

# Line of Best Fit
best_fit_plot <- ggplot(residuals_df, aes(x = Fiscal_Year)) +
  geom_line(aes(y = Historic_Values, color = "Actual Values"), size = 1) +  # Plot historic values
  geom_point(aes(y = Historic_Values, color = "Actual Values"), size = 2) +
  geom_line(aes(y = Fitted_Values, color = "Fitted Values"), size = 1, linetype = "dashed") +  # Plot fitted values (line of best fit)
   geom_point(aes(y = Fitted_Values, color = "Fitted Values"), size = 2) +  # Add points for fitted values
  geom_ribbon(aes(ymin = Fitted_Values_Minus_1SD, ymax = Fitted_Values_Plus_1SD), fill = "orange", alpha = 0.2) +  # 1 SD band
  geom_ribbon(aes(ymin = Fitted_Values_Minus_2SD, ymax = Fitted_Values_Plus_2SD), fill = "yellow", alpha = 0.2) +  # 2 SD band
  labs(title = "Actual vs. Fitted Values with ±1 and ±2 Standard Deviations",
       x = "Fiscal Year",
       y = "Nitrogen Volume K Ton") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 2)) + 
  scale_color_manual(values = c("Actual Values" = "blue", "Fitted Values" = "red")) +  # Set custom colors
  theme(plot.title = element_text(hjust = 0.5))  # Center the plot title

# Save all the plots

ggsave("visualization/model-diagnoistics-6-vars/resid_over_time.png", plot = resid_over_time, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/resid_over_time.png", plot = resid_over_time, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/resid_hist.png", plot = resid_hist, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/best_fit_plot.png", plot = best_fit_plot, width = 942/72, height = 850/72)

```

### 8 vars model


```{r}
eights_vars_model <- lm(
    nit_vol_k_ton ~ nit_price_per_ton + 
                    water_maf + 
                    cr_area_mn_hec +
                    lag_agric_gdp_usd_bn_cy +
                    agric_credit_ratio +
                    tech_proxy +
                    inp_out_ratio +
                    n_p_ratio,
                    data = data_tsibble
        )

print(summary(eights_vars_model))

# Calculate VIF
vif_values <- vif(eights_vars_model)

# Calculate the ANOVA table for the model
anova_results <- anova(eights_vars_model)

# Extract residuals and fitted values from the linear model
residuals_df <- data.frame(
  Fiscal_Year = data_tsibble$fis_yr, 
  Residuals = residuals(eights_vars_model),
  Fitted_Values = eights_vars_model$fitted.values,
  Historic_Values = data_tsibble$nit_vol_k_ton
)

median_resid <- median(residuals_df$Residuals)
sd_resid <- sd(residuals_df$Residuals)

# Add columns for ±1 and ±2 standard deviations around the fitted values
residuals_df <- residuals_df |>
  mutate(
    Fitted_Values_Plus_1SD = Fitted_Values + sd_resid,
    Fitted_Values_Minus_1SD = Fitted_Values - sd_resid,
    Fitted_Values_Plus_2SD = Fitted_Values + 2 * sd_resid,
    Fitted_Values_Minus_2SD = Fitted_Values - 2 * sd_resid
  )

# Plot residuals
resid_over_time <- ggplot(residuals_df, aes(x = Fiscal_Year, y = Residuals)) +
  geom_line() +
  geom_point() +
  labs(title = "Residuals over Time", x = "Fiscal Year", y = "Residuals") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 5)) 


# ACF plot
resid_acf <- acf(residuals_df$Residuals, main="ACF Plot of Model Residuals")

# Residual Histograms
resid_hist <- gghistogram(residuals_df$Residuals, fill = "brown", add = "median",title = "Histogram for Residual Errors") + 
  annotate("text", x = median_resid, y = 0, label = paste("Median =", round(median_resid, 2)), vjust = -35, color = "black", size = 4) +
  annotate("text", x = median_resid, y = 0, label = paste("Std Dev=", round(sd_resid, 2)), vjust = -33, hjust = 0.5, color = "black", size = 4)

# Conduct Normality check
shapiro.test(residuals_df$Residuals)

# Durbin Watson Test for Autocorrelation tests

durbinWatsonTest(eights_vars_model)

# White Test for hetroscedacity 

white_test <- bptest(
    eights_vars_model,
    ~ fitted.values(eights_vars_model) + I(fitted.values(eights_vars_model)^2)
)

# Print the result
print(white_test)

# Create a Residuals vs. Fitted Values plot
plot(eights_vars_model, which = 1)

# Create a QQ-plot of residuals
plot(eights_vars_model, which = 2)

# Create a Scale-Location plot Spread-Location plot or sqrt(residuals) vs. fitted values plot
# It is designed to check the assumption of homoscedasticity: residuals (errors) of the model have constant variance across all levels of the independent variables.
plot(eights_vars_model, which = 3)

# Create Cook's distance plot
plot(eights_vars_model, which = 4)

# Create a Residuals vs. Leverage plot: to identify influential data points and assess the influence of observations on the regression model
plot(eights_vars_model, which = 5)

# Line of Best Fit
best_fit_plot <- ggplot(residuals_df, aes(x = Fiscal_Year)) +
  geom_line(aes(y = Historic_Values, color = "Actual Values"), size = 1) +  # Plot historic values
  geom_point(aes(y = Historic_Values, color = "Actual Values"), size = 2) +
  geom_line(aes(y = Fitted_Values, color = "Fitted Values"), size = 1, linetype = "dashed") +  # Plot fitted values (line of best fit)
   geom_point(aes(y = Fitted_Values, color = "Fitted Values"), size = 2) +  # Add points for fitted values
  geom_ribbon(aes(ymin = Fitted_Values_Minus_1SD, ymax = Fitted_Values_Plus_1SD), fill = "orange", alpha = 0.2) +  # 1 SD band
  geom_ribbon(aes(ymin = Fitted_Values_Minus_2SD, ymax = Fitted_Values_Plus_2SD), fill = "yellow", alpha = 0.2) +  # 2 SD band
  labs(title = "Actual vs. Fitted Values with ±1 and ±2 Standard Deviations",
       x = "Fiscal Year",
       y = "Nitrogen Volume K Ton") +
  scale_x_continuous(breaks = seq(min(residuals_df$Fiscal_Year), max(residuals_df$Fiscal_Year), by = 2)) + 
  scale_color_manual(values = c("Actual Values" = "blue", "Fitted Values" = "red")) +  # Set custom colors
  theme(plot.title = element_text(hjust = 0.5))  # Center the plot title

# Save all the plots

ggsave("visualization/model-diagnoistics-6-vars/resid_over_time.png", plot = resid_over_time, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/resid_over_time.png", plot = resid_over_time, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/resid_hist.png", plot = resid_hist, width = 942/72, height = 850/72)

ggsave("visualization/model-diagnoistics-6-vars/best_fit_plot.png", plot = best_fit_plot, width = 942/72, height = 850/72)


```