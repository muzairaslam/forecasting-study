---
title: "Preliminary Analysis and Tables"
format: html
editor: visual
---

## Loading Packages

```{r}
library("tidyverse")
library("fpp3")
library("GGally")
library("here")
library("ggrepel")
library("gt")
```

## Data Loading
```{r}
data <- read_csv(here("data/data-consolidated-2.csv"))
```

## Data Arrangement

```{r}
# Year = Index
data_arranged <- data |>
    rename(
        no = `Serial No`,
        fis_yr = `Fiscal Year`,
        nit_vol_k_ton = `Nitrogen Volume (N K tonnes)`,
        nit_price_per_ton = `Nitrogen Price (per tonne)`,
        water_maf = `Water Availability (MAF)`,
        cr_area_mn_hec = `Cropped Area (million hectares)`,
        agric_gdp_rs_bn = `Agricultural GDP (Rs in billions)`,
        agric_gdp_usd_bn_cy = `Agricultural GDP (current BN US$) C-Y`,
        credit_dis_rs_mn = `Total Credit Disbursed (Rs million)`,
        inp_out_ratio = `Input Output Ratio`,
        n_p_ratio = `N / P`,
        agric_employment = `Agriculture Employment (Mns)`,
        pkr_per_usd = `PKR-USD`
    ) |>
    mutate(
        lag_agric_gdp_rs_bn = lag(agric_gdp_rs_bn),
        tech_proxy = (agric_gdp_rs_bn/cr_area_mn_hec)/(cr_area_mn_hec/agric_employment),
        lg_nit_vol_k_ton = log(nit_vol_k_ton),
        lg_nit_price_per_ton = log(nit_price_per_ton),
        lg_water_maf = log(water_maf),
        lg_cr_area_mn_hec = log(cr_area_mn_hec),
        lg_agric_gdp_rs_bn = log(agric_gdp_rs_bn),
        lg_agric_gdp_usd_bn_cy = log(agric_gdp_usd_bn_cy),  
        lg_credit_dis_rs_mn = log(credit_dis_rs_mn),
        lg_inp_out_ratio = log(inp_out_ratio),
    ) |> 
    slice_tail(n = 29)

data_arranged$fis_yr <- as.integer(data_arranged$fis_yr)
data_arranged$no <- as.integer(data_arranged$no)
data_arranged$nit_vol_k_ton <- as.integer(data_arranged$nit_vol_k_ton)

data_tsibble <- data_arranged |> 
    as_tsibble(index = fis_yr)
```

## Data Visualization

### Correlation Plots


```{r}
my_fn <- function(data, mapping, method="p", use="pairwise", ...){

              # grab data
              x <- eval_data_col(data, mapping$x)
              y <- eval_data_col(data, mapping$y)

              # calculate correlation
              corr <- cor(x, y, method=method, use=use)

              # calculate colour based on correlation value
              # Here I have set a correlation of minus one to blue, 
              # zero to white, and one to red 
              # Change this to suit: possibly extend to add as an argument of `my_fn`
              colFn <- colorRampPalette(c("blue", "white", "red"), interpolate ='spline')
              fill <- colFn(100)[findInterval(corr, seq(-1, 1, length=100))]

              ggally_cor(data = data, mapping = mapping, ...) + 
                theme_void() +
                theme(panel.background = element_rect(fill=fill))
            }
```

#### Normal variables

```{r}
p1 <- data_tsibble |> ggpairs(columns = 4:12, 
                   upper = list(continuous = my_fn),
                   lower = list(continuous = "smooth"))
                   
p1
```


#### Log Transformed Variables

```{r}
p2 <- data_tsibble |> ggpairs(columns = 13:22, 
                   upper = list(continuous = my_fn),
                   lower = list(continuous = "smooth"))
                   
p2
```

#### Simple Correlation Table for Nominal Variables

```{r}
nom_vars <- data_tsibble |>
    select(
        nit_price_per_ton ,
        water_maf,
        cr_area_mn_hec,
        agric_gdp_rs_bn,
        lag_agric_gdp_rs_bn,
        agric_gdp_usd_bn_cy,
        credit_dis_rs_mn ,
        inp_out_ratio ,
        n_p_ratio,
        agric_employment ,
        pkr_per_usd,
        tech_proxy
    )

nom_vars <- nom_vars[, -ncol(nom_vars)]

# Calculate the correlation matrix
correlation_matrix <- cor(nom_vars, use = "pairwise.complete.obs")

# Convert the correlation matrix to a data frame
correlation_df <- as.data.frame(as.table(correlation_matrix))

# Rename the columns for clarity

# make the table wide
correlation_wide <- correlation_df |>
  pivot_wider(names_from = Var2, values_from = Freq)

# Create the correlation table using gt
# Create the correlation table using gt
correlation_table <- correlation_wide %>%
  gt() %>%
  tab_header(
    title = "Correlation Matrix",
    subtitle = "Correlation coefficients for the variables"
  ) |>
  fmt_number(
    decimals = 2
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "lightgrey"),
      cell_text(weight = "bold")
    ),
    locations = cells_title(groups = c("title", "subtitle"))
  ) |>
  tab_options(
    table.font.size = 12,
    column_labels.font.size = 14,
    heading.align = "center",
    table.align = "center",
    table.border.top.color = "black",
    table.border.bottom.color = "black",
    table.border.top.width = px(2),
    table.border.bottom.width = px(2)
  ) |>
  data_color(
    columns = vars(-Var1),
    colors = scales::col_bin(
      bins = c(-Inf, -0.75, 0.75, Inf),
      palette = c("red", "white", "white", "#FFCCCB")
    )
  )

# Print the correlation table
print(correlation_table)

gtsave(correlation_table, "correlation_table.docx")
```

#### Scatterplot for Water (MAF) and Agriculture GDP (RS)

```{r}
water_agric <- ggplot(data_tsibble, aes(x = water_maf, y = agric_gdp_rs_bn)) +
    geom_point() +
    geom_text(aes(label = fis_yr), vjust = -0.5, hjust = 0.5) +
    geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
    theme_classic() +
    labs(
        title = "Scatterplot for Water (MAF) and Agriculture GDP (Rs Billion)",
        x = "Water (MAF)",
        y = "Agricultural GDP (Rs Billion)"
    ) +
    scale_x_continuous(limits = c(120, 145), breaks = seq(120, 145, 5)) + # Adjusting x-axis    
    scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, 500)) # Adjusting y-axis


water_agric
```

#### Scatterplot for Water (MAF) and Accreage

```{r}
water_accreage <- ggplot(data_tsibble, aes(x = water_maf, y = cr_area_mn_hec)) +
    geom_point() +
    geom_text(aes(label = fis_yr), vjust = -0.5, hjust = 0.5) +
    geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
    theme_classic() +
    labs(
        title = "Scatterplot for Water (MAF) and Cropped Area Mn (Hectare)",
        x = "Water (MAF)",
        y = "Cropped Area Mn (Hectare)"
    ) +    
    scale_x_continuous(limits = c(120, 145), breaks = seq(120, 145, 5)) + # Adjusting x-axis  
    scale_y_continuous(limits = c(22, 24.5), breaks = seq(22, 24.5, 0.5)) # Adjusting y-axis


water_accreage
```


#### Scatterplot for Accreage and Agriculture GDP (Rs)
```{r}
accreage_gdp <- ggplot(data_tsibble, aes(x = cr_area_mn_hec, y = agric_gdp_rs_bn)) +
    geom_point() +
    geom_text(aes(label = fis_yr), vjust = -0.5, hjust = 0.5) +
    geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
    theme_classic() +
    labs(
        title = "Scatterplot for Agriculture GDP (Rs) and Accreage",
        x = "Cropped Area Mn (Hectare)",
        y = "Agricultural GDP (Rs Billion)"
    ) +    
    scale_x_continuous(limits = c(22, 24.5), breaks = seq(22, 24.5, 0.5)) # Adjusting x-axis  
    scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, 500)) # Adjusting y-axis


accreage_gdp
```

#### Scatterplot for Tech Proxy and Agriculture GDP (Rs)
```{r}
techproxy_gdp <- ggplot(data_tsibble, aes(x = tech_proxy, y = agric_gdp_rs_bn)) +
    geom_point() +
    geom_text_repel(aes(label = fis_yr), nudge_y = 10, nudge_x = 0.1, box.padding = 0.5, point.padding = 0.5, segment.size = 0.2) +
    geom_smooth(method = lm, se = FALSE, fullrange = TRUE) +
    theme_classic() +
    labs(
        title = "Scatterplot for Agriculture GDP (Rs) and Accreage",
        x = "Technology Proxy",
        y = "Agricultural GDP (Rs Billion)"
    ) +    
    #scale_x_continuous(limits = c(2000, 2300000), breaks = seq(20000, 230000, 30000)) # Adjusting x-axis  
    scale_y_continuous(limits = c(0, 6000), breaks = seq(0, 6000, 500)) # Adjusting y-axis

techproxy_gdp
```

## Descriptive Analysis Table

## CAGR Table

